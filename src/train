#!/usr/bin/env python3
from __future__ import print_function
import os
import sys
import traceback

import numpy as np
import time
import json

from flair.data import Corpus
from flair.datasets import ColumnCorpus
from flair.embeddings import TokenEmbeddings, WordEmbeddings, StackedEmbeddings,CharacterEmbeddings,FlairEmbeddings
from typing import List
# 5. initialize sequence tagger
from flair.models import SequenceTagger

# 6. initialize trainer
from flair.trainers import ModelTrainer

# # 8. plot training curves (optional)
# from flair.visual.training_curves import Plotter


container_prefix = '/opt/ml/'

input_path = container_prefix + 'input/data'
output_path = os.path.join(container_prefix, 'output')
model_path = os.path.join(container_prefix, 'model')
param_path = os.path.join(container_prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name = 'training'
training_path = os.path.join(input_path, channel_name)

batch_size = 32
# num_classes = 10
epochs = 1

def read_hyperparameters():
    global batch_size
    global epochs
    print("Reading hyperparameters")
    with open(param_path, 'r') as tc:
        hyperparameters = json.load(tc)
    if "batch_size" in hyperparameters:
        batch_size = int(hyperparameters["batch_size"])
    if "epochs" in hyperparameters:
        epochs = int(hyperparameters["epochs"])





# this is the folder in which train, test and dev files reside
data_folder = training_path



def train_model( ):

    # define columns
    # columns = {0: "text", 1: "ner"}
    # columns = {0: "text", 1: "pos", 2: "ner"}
    columns = {0: "text", 1: "pos", 2: "np", 3: "ner"}
    data_folder = training_path

    # init a corpus using column format, data folder and the names of the train, dev and test files
    corpus: Corpus = ColumnCorpus(data_folder, columns,
                              train_file='train.txt',
                              test_file='test.txt',
                              dev_file='dev.txt')
    
    print("Finished data standardization.........")


    # # 1. get the corpus
    # corpus: Corpus = WIKINER_ENGLISH().downsample(0.1)
    # print(corpus)

    # 2. what tag do we want to predict?
    tag_type = 'ner'

    # 3. make the tag dictionary from the corpus
    tag_dictionary = corpus.make_tag_dictionary(tag_type=tag_type)
    print(tag_dictionary.idx2item)

    # 4. initialize embeddings
    embedding_types: List[TokenEmbeddings] = [

        # WordEmbeddings('/home/Balaram_bhukya/PycharmProjects/Flair_NER/nerData/wordembeddings/FT.50D.gensim'),
        WordEmbeddings('glove'),

        # comment in this line to use character embeddings
        CharacterEmbeddings(),

        # comment in these lines to use flair embeddings
        # FlairEmbeddings('news-forward'),
        FlairEmbeddings('news-forward-fast')
        # FlairEmbeddings('news-backward'),
    ]
    embeddings: StackedEmbeddings = StackedEmbeddings(embeddings=embedding_types)



    tagger: SequenceTagger = SequenceTagger(hidden_size=256,
                                            embeddings=embeddings,
                                            tag_dictionary=tag_dictionary,
                                            tag_type=tag_type,
                                            use_crf=True)



    trainer: ModelTrainer = ModelTrainer(tagger, corpus)

    return trainer


def train():
    try:
        read_hyperparameters()
        trainer=train_model()
        # 7. start training
        trainer.train(model_path,
              learning_rate=0.1,
              mini_batch_size=32,
              max_epochs=3)
        
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)
        print("Finished training the model.")


# plotter = Plotter()
# plotter.plot_training_curves('loss.tsv')
# plotter.plot_weights('weights.txt')
if __name__ == '__main__':
    start = time.time()
    # print(device_lib.list_local_devices())
    print("Script Status - Starting")
    train()
    print("Script Status - Finished")
    print("Total time taken to train the model: ", time.time() - start)

    # A zero exit code causes the job to be marked a succeeded.
    sys.exit(0)
